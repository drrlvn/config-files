runtime macros/matchit.vim

" {{{ useful options
set complete+=k completeopt+=longest
set cursorline
set ignorecase smartcase
set incsearch
set laststatus=2 statusline=%F%m%r%h%w\ %y\ [%{&fileformat}\|%{&encoding}]%=[ASCII=\%03b,\ Hex=\%02B]\ [%02l,%02c%03V\|%02p%%]\ [%L]
set list listchars=tab:\|Â·
set nofoldenable
set nohidden
set nowrap
set number
set path+=/usr/include/glib-2.0
set scrolloff=5
set shiftwidth=4 tabstop=4
set showmatch
set viminfo=
set virtualedit=block
set wildmode=list:longest
exec "set path+=".substitute(getcwd(), ' ', '\\\ ', 'g')."/**"

let g:netrw_browse_split=3
let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'
" }}}

" {{{ mappings
noremap <C-Left> gT
noremap <C-Right> gt
noremap <BS> O<Esc>
noremap <CR> o<Esc>
noremap Y y$
nnoremap <silent> <C-l> :noh<CR><C-l>
nnoremap <C-p> :Lodgeit<CR>
vnoremap <F2> d:execute 'normal i' . join(sort(split(getreg('"'))), ' ')<CR>
nnoremap <S-F2> :%s/<C-v><Esc>.\{-}m//g<CR>''
nnoremap <F3> :bprevious<CR>
nnoremap <F4> :bnext<CR>
nnoremap <F5> :!./%<CR>
nnoremap <S-F5> :!ebuild % unpack<CR>
nnoremap <M-F5> :!ebuild % prepare<CR>
nnoremap <F6> :make<CR>
nnoremap <S-F6> :!ebuild % manifest<CR>
nnoremap <F7> [c
nnoremap <F8> ]c
nnoremap <F9> :Explore<CR>
noremap <F10> :quit<CR>
noremap <S-F10> :quitall!<CR>
noremap <M-F10> :bdelete<CR>
noremap <F11> :update<CR>
noremap <S-F11> :exit<CR>
noremap <M-F11> :wall<CR>
" }}}

" {{{ set per filetype options
filetype plugin indent on

au BufRead *.txt setlocal wrapmargin=2 textwidth=78 spell
au FileType * exec 'setlocal dict+='.substitute($VIMRUNTIME, ' ', '\\\ ', 'g').'/syntax/'.&filetype.'.vim'
au FileType netrw setlocal nohlsearch
au FileType mail setlocal spell
au FileType rst setlocal noexpandtab wrapmargin=2 textwidth=78 spell
au FileType changelog setlocal textwidth=0 spell
au FileType python setlocal foldmethod=indent
au FileType vim setlocal foldmethod=marker
au FileType {c,cpp} setlocal foldmethod=syntax
au FileType java compiler javac
" }}}

" {{{ colors
"let g:inkpot_black_background = 1
colorscheme inkpot

if ! has("gui_running")
	highlight CursorLine NONE ctermbg=235
endif
" }}}

let python_highlight_all=1

if has("cscope")
	set cscopetag
	if filereadable("cscope.out")
		" add any database in current directory
		cs add cscope.out
	elseif $CSCOPE_DB != ""
		" else add database pointed to by environment
		cs add $CSCOPE_DB
	endif

	nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif
