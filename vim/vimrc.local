" useful options"{{{
set complete+=k
set completeopt+=longest
set cursorline
set hidden
set incsearch
set list
set listchars=tab:\|\
set nofoldenable
set nowrap
set number
set path+=/usr/include/glib-2.0
set scrolloff=5
set shiftwidth=4
set showmatch
set tabstop=4
set viminfo=
set virtualedit=block
exec "set path+=".substitute(getcwd(), ' ', '\\\ ', 'g')."/**"
"}}}

" mappings"{{{
map <C-h> gT
map <C-l> gt
"}}}

" set per filetype options"{{{
au FileType * exec 'setl dict+='.$VIMRUNTIME.'/syntax/'.&filetype.'.vim'
au FileType python set foldmethod=indent
au FileType vim set foldmethod=marker
au FileType {c,cpp} set foldmethod=syntax
"}}}

" colors"{{{
colorscheme delek
set background=dark
highlight TabLine cterm=none
"}}}

let python_highlight_all=1

if has("cscope")
	set cscopetag
	if filereadable("cscope.out")
		" add any database in current directory
		cs add cscope.out
	elseif $CSCOPE_DB != ""
		" else add database pointed to by environment
		cs add $CSCOPE_DB
	endif

	nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif
