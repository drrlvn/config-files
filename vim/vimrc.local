runtime macros/matchit.vim

" {{{ useful options
set autochdir
set cursorline
set dict+=/usr/share/dict/words
set ignorecase smartcase
set incsearch
set laststatus=2 statusline=%F%m%r%h%w\ %y\ [%{&fileformat}\|%{&encoding}]%=[ASCII=\%03b,\ Hex=\%02B]\ [%02l,%02c%03V\|%02p%%]\ [%L]
set list listchars=tab:›·
set mouse=i
set nofoldenable
set nohidden
set nowrap
set number
set scrolloff=5
set shiftwidth=4 tabstop=4
set showcmd
set showmatch
set thesaurus+=/usr/share/moby-thesaurus/mthesaur.txt
set virtualedit=block
set wildmode=list:longest
exec 'set path+='.substitute(expand('%:h'), ' ', '\\\ ', 'g').'/**'

let g:snips_author='Dror Levin'
let g:netrw_browse_split=3
let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'
" }}}

" {{{ functions
func GentooCompare(i1, i2)
	let s1 = substitute(a:i1, '^[-+~]', '', '')
	let s2 = substitute(a:i2, '^[-+~]', '', '')
	return l:s1 == l:s2 ? 0 : l:s1 > l:s2 ? 1 : -1
endfunc
" }}}

" {{{ mappings
inoremap <M-Left> <C-o>b
inoremap <M-Right> <C-o>w
inoremap <M-C-Left> <C-o>B
inoremap <M-C-Right> <C-o>W

noremap <C-Left> gT
noremap <C-Right> gt
noremap <C-n> :tabnew<CR>
noremap <BS> O<Esc>
noremap <CR> o<Esc>
noremap Y y$
nnoremap <silent> - :noh<CR>
nnoremap + :set paste!<CR>
nnoremap <C-p> :Lodgeit<CR>
inoremap <C-y> <C-y><C-o>:pclose<CR>
inoremap <C-e> <C-e><C-o>:pclose<CR>
nnoremap <Space> za
noremap N Nzz
noremap n nzz

vnoremap <F2> s<Esc>:execute 'normal a' . join(sort(split(getreg('"')), 'GentooCompare'), ' ')<CR>gqq
nnoremap <silent> <S-F2> :%s/<C-v><Esc>.\{-}m//ge<CR>:%s/<C-v><C-h>.//ge<CR>''
nnoremap <F3> :bprevious<CR>
nnoremap <F4> :bnext<CR>
nnoremap <F5> :!./%<CR>
nnoremap <F6> :make<CR>
nnoremap <S-F6> :silent !ebuild % manifest<CR><C-l>
nnoremap <F7> [c
nnoremap <F8> ]c
nnoremap <F9> :Explore<CR>
noremap <F10> :quit<CR>
noremap <S-F10> :quitall!<CR>
noremap <M-F10> :bdelete<CR>
noremap <F11> :update<CR>
noremap <S-F11> :exit<CR>
noremap <M-F11> :wall<CR>
" }}}

" {{{ set per filetype options
filetype plugin indent on

au BufRead,BufNewFile *.txt setlocal wrapmargin=2 textwidth=78 spell
au FileType * exec 'setlocal dict='.substitute($VIMRUNTIME, ' ', '\\\ ', 'g').'/syntax/'.&filetype.'.vim,'.&dict
au FileType netrw setlocal nohlsearch
au FileType mail setlocal spell
au FileType rst setlocal noexpandtab wrapmargin=2 textwidth=78 spell
au FileType changelog setlocal textwidth=0 spell
au FileType python setlocal foldmethod=indent
au FileType vim setlocal foldmethod=marker
au FileType {c,cpp} setlocal foldmethod=syntax
au FileType java compiler javac
" }}}

" {{{ colors
au BufRead,BufNewFile * highlight link WhitespaceErrors Error
au BufRead,BufNewFile * match WhitespaceErrors /\s\+$/

if has('gui_running')
	let g:inkpot_black_background = 1
endif

colorscheme inkpot

if has('gui_running')
	highlight CursorLine NONE guibg=#404040
else
	highlight CursorLine NONE ctermbg=235
endif
" }}}

let python_highlight_all=1

if has('cscope')
	set cscopetag
	if filereadable('cscope.out')
		" add any database in current directory
		cs add cscope.out
	elseif $CSCOPE_DB != ''
		" else add database pointed to by environment
		cs add $CSCOPE_DB
	endif

	nmap <C-\>s :cs find s <C-R>=expand('<cword>')<CR><CR>
	nmap <C-\>g :cs find g <C-R>=expand('<cword>')<CR><CR>
	nmap <C-\>c :cs find c <C-R>=expand('<cword>')<CR><CR>
	nmap <C-\>t :cs find t <C-R>=expand('<cword>')<CR><CR>
	nmap <C-\>e :cs find e <C-R>=expand('<cword>')<CR><CR>
	nmap <C-\>f :cs find f <C-R>=expand('<cfile>')<CR><CR>
	nmap <C-\>i :cs find i ^<C-R>=expand('<cfile>')<CR>$<CR>
	nmap <C-\>d :cs find d <C-R>=expand('<cword>')<CR><CR>
endif
