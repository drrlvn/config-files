scriptencoding utf-8

" alternate - http://www.vim.org/scripts/script.php?script_id=31
" bufexplorer - http://www.vim.org/scripts/script.php?script_id=42
" cppcomplete - http://www.vim.org/scripts/script.php?script_id=527
" NERD_tree - http://www.vim.org/scripts/script.php?script_id=1658
" scratch - http://www.vim.org/scripts/script.php?script_id=664
" snipMate - http://www.vim.org/scripts/script.php?script_id=2540
" surround - http://www.vim.org/scripts/script.php?script_id=1697
" taglist - http://www.vim.org/scripts/script.php?script_id=273
" YankRing - http://www.vim.org/scripts/script.php?script_id=1234

runtime macros/matchit.vim

" {{{ useful options
set autoindent
set confirm
set dict+=/usr/share/dict/words
set gdefault
set hidden
set hlsearch
set ignorecase smartcase
set incsearch
set laststatus=2 statusline=%n\ %F%m%r%h%w\ %y\ [%{&fileformat}\|%{&encoding}]%=[ASCII=\%03b,\ Hex=\%02B]\ [%02l,%02c%03V\|%02p%%]\ [%L]
set list listchars=tab:»\ ,trail:·
set mouse=a
set nocursorline
set nofoldenable
set nomodeline
set nowrap
set number
set pastetoggle=<Leader>+
set path+=.;,./**
set scrolloff=5
set shiftwidth=4 tabstop=4
set showbreak=…
set showcmd
set showmatch
set spelllang=en_us
set switchbuf=useopen,usetab
set thesaurus+=/usr/share/moby-thesaurus/mthesaur.txt
set timeoutlen=500
set virtualedit=block
set visualbell
set whichwrap+=[,]
set wildmode=list:longest

au BufRead,BufNewFile * let b:args=''

" snipmate
let g:snips_author='Dror Levin'

" netrw
let g:netrw_browse_split=3
let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'

" BufExplorer
let g:bufExplorerSortBy='name'

" OmniCppComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 0 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" }}}

" {{{ functions
func! GentooCompare(i1, i2)
	let s1 = substitute(a:i1, '^[-+~]', '', '')
	let s2 = substitute(a:i2, '^[-+~]', '', '')
	return l:s1 == l:s2 ? 0 : l:s1 > l:s2 ? 1 : -1
endfunc
" }}}

" {{{ mappings
inoremap <M-Left> <C-o>b
inoremap <M-Right> <C-o>w
inoremap <M-C-Left> <C-o>B
inoremap <M-C-Right> <C-o>W

" move when soft wrapping and horizontally
nnoremap <C-h> zH
nnoremap <C-j> gj
nnoremap <C-k> gk
nnoremap <C-l> zL
vnoremap <C-h> zH
vnoremap <C-j> gj
vnoremap <C-k> gk
vnoremap <C-l> zL

" edit in working directory
noremap <Leader>ew :e <C-r>=substitute(expand("%:p:h"), ' ', '\\\ ', 'g')<CR>/
noremap <Leader>es :sp <C-r>=substitute(expand("%:p:h"), ' ', '\\\ ', 'g')<CR>/
noremap <Leader>ev :vsp <C-r>=substitute(expand("%:p:h"), ' ', '\\\ ', 'g')<CR>/
noremap <Leader>et :tabe <C-r>=substitute(expand("%:p:h"), ' ', '\\\ ', 'g')<CR>/

nnoremap <silent> <Tab> :bnext<CR>
nnoremap <silent> <S-Tab> :bprevious<CR>
noremap <C-Left> :tabprevious<CR>
noremap <C-Right> :tabnext<CR>
noremap <C-n> :tabnew<CR>
noremap <BS> O<Esc>
noremap <CR> o<Esc>
noremap Y y$
nnoremap <silent> - :let @/=''<CR>
nnoremap <silent> _ :setl spell!<CR>
vnoremap < <gv
vnoremap > >gv
nnoremap <silent> <Leader>- :setl wrap! linebreak! list!<CR>
nnoremap <C-p> :Lodgeit<CR>
inoremap <C-y> <C-y><C-o>:pclose<CR>
inoremap <C-e> <C-e><C-o>:pclose<CR>
nnoremap <Space> za
nnoremap <silent> <Leader><Space> :setl foldenable!<CR>
noremap N Nzz
noremap n nzz

" ctags
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <M-]> :vsp<CR>:exec("tag ".expand("<cword>"))<CR>

nnoremap <Leader>! :setl nolist<CR>:ConqueTerm bash -l<CR>
nnoremap <Leader>@ :setl nolist<CR>:ConqueTerm ipython<CR>

noremap / /\v

vnoremap <F2> s<Esc>:execute 'normal a' . join(sort(split(getreg('"')), 'GentooCompare'), ' ')<CR>gqq
nnoremap <silent> <S-F2> :%s/<C-v><Esc>.\{-}m//ge<CR>:%s/<C-v><C-h>.//ge<CR>''
nnoremap <F3> :bprevious<CR>
nnoremap <F4> :bnext<CR>
nnoremap <F5> :exec '!./% ' . b:args<CR>
nnoremap <F6> :make<CR>
nnoremap <F7> :NERDTreeToggle<CR>
nnoremap <F8> :call Taglist_Toggle()<CR>
nnoremap <F9> :BufExplorer<CR>
noremap <F10> <Esc>:quit<CR>
noremap <S-F10> <Esc>:quitall!<CR>
noremap <M-F10> <Esc>:bdelete<CR>
noremap <F11> <Esc>:update<CR>
noremap <S-F11> <Esc>:exit<CR>
noremap <M-F11> <Esc>:wall<CR>
imap <F10> <Esc><F10>
imap <S-F10> <Esc><S-F10>
imap <M-F10> <Esc><M-F10>
imap <F11> <Esc><F11>
imap <S-F11> <Esc><S-F11>
imap <M-F11> <Esc><M-F11>

let b:updatetime_users = 0
au BufCreate * let b:updatetime_users = 0

func! Taglist_Toggle()
	TlistToggle
	if exists('#taglist')
		au! taglist
		augroup! taglist
		let b:updatetime_users -= 1
		if b:updatetime_users <= 0
			setl updatetime=4000
		endif
	else
		let b:updatetime_users += 1
		setl updatetime=500
		augroup taglist
			au!
			au CursorHold * TlistHighlightTag
		augroup end
	endif
endfunc

nnoremap <silent> <Leader>/ :call Auto_Highlight_Toggle()<CR>

func! Auto_Highlight_Toggle()
	if exists('#auto_highlight')
		au! auto_highlight
		augroup! auto_highlight
		let @/=''
		let b:updatetime_users -= 1
		if b:updatetime_users <= 0
			setl updatetime=4000
		endif
	else
		let b:updatetime_users += 1
		setl updatetime=500
		augroup auto_highlight
			au!
			au CursorHold * let @/='\<'.expand('<cword>').'\>'
		augroup end
	endif
endfunc
" }}}

" {{{ set per filetype options
filetype plugin indent on
syntax on

au BufRead,BufNewFile *.txt setlocal wrapmargin=2 textwidth=78 formatoptions+=a spell
au FileType * exec 'setlocal dict='.substitute($VIMRUNTIME, ' ', '\\\ ', 'g').'/syntax/'.&filetype.'.vim,'.&dict
au FileType mail setlocal spell
au FileType rst setlocal noexpandtab wrapmargin=2 textwidth=78 formatoptions+=a spell
au FileType ebuild nnoremap <F6> :silent !repoman manifest<CR><C-l>
au FileType changelog setlocal formatoptions+=a spell
au FileType python setlocal foldmethod=indent formatoptions=wcrq2l include=^\\s*\\(from\\\|import\\)
au FileType vim setlocal foldmethod=marker
au FileType c,cpp setlocal foldmethod=syntax tags+=~/.vim/tags/glib,~/.vim/tags/dbus
au FileType c,cpp nnoremap <F5> :exec '!./%:r ' . b:args<CR>
au FileType c noremap <C-F12> :!ctags -R --sort=foldcase --c-kinds=+pl --fields=+S .<CR>
au FileType cpp noremap <C-F12> :!ctags -R --sort=foldcase --c++-kinds=+pl --fields=+iaS --extra=+q .<CR>
au FileType cpp set tags+=~/.vim/tags/cpp,~/.vim/tags/boost,~/.vim/tags/qt4,~/.vim/tags/kde
au FileType java compiler javac
au FileType java nnoremap <F5> :exec '!java %:r ' . b:args<CR>
au FileType java nnoremap <F6> :make %<CR>
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
" }}}

" {{{ colors
"highlight link WhitespaceErrors Error
"au BufRead,BufNewFile * match WhitespaceErrors /\s\+$/

if has('gui_running')
	colorscheme wombat
	highlight StatusLine gui=bold
else
	let g:inkpot_black_background=1
	colorscheme inkpot
	"highlight CursorLine NONE ctermbg=236
endif
" }}}

let python_highlight_all=1

if has('cscope')
	set cscopetag
	if filereadable('cscope.out')
		" add any database in current directory
		cs add cscope.out
	elseif $CSCOPE_DB != ''
		" else add database pointed to by environment
		cs add $CSCOPE_DB
	endif

	nmap <C-\>s :cs find s <C-R>=expand('<cword>')<CR><CR>
	nmap <C-\>g :cs find g <C-R>=expand('<cword>')<CR><CR>
	nmap <C-\>c :cs find c <C-R>=expand('<cword>')<CR><CR>
	nmap <C-\>t :cs find t <C-R>=expand('<cword>')<CR><CR>
	nmap <C-\>e :cs find e <C-R>=expand('<cword>')<CR><CR>
	nmap <C-\>f :cs find f <C-R>=expand('<cfile>')<CR><CR>
	nmap <C-\>i :cs find i ^<C-R>=expand('<cfile>')<CR>$<CR>
	nmap <C-\>d :cs find d <C-R>=expand('<cword>')<CR><CR>
endif
